services:

  # Postgres server used by Dagster.
  #
  # > This service runs the postgres DB used by dagster for run storage, schedule storage,
  # > and event log storage.
  # > Tests use `postgres:11` image.
  # > https://github.com/dagster-io/dagster/blob/0.11.9/python_modules/libraries/dagster-postgres/dagster_postgres_tests/docker-compose.yml
  #
  dagster-postgresql:
    image: postgres:11
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Web server that hosts the Dagster web UI.
  #
  # > This service runs dagit.
  # > Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # > a queue and later dequeued and launched by dagster-daemon.
  #
  dagster-dagit:
    build:
      context: .
      dockerfile: nmdc_runtime/Dockerfile
      target: dagster
    entrypoint: ["tini", "--", "../lib/nmdc_runtime/site/entrypoint-dagit.sh"]
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      - dagster-postgresql
    restart: on-failure
    volumes:
      - ./:/opt/dagster/lib
    env_file: .env.test

  # Dagster daemon.
  #
  # > This service runs the dagster-daemon process, which is responsible for taking runs
  # > off of the queue and launching them, as well as creating runs from schedules or sensors.
  #
  dagster-daemon:
    build:
      context: .
      dockerfile: nmdc_runtime/Dockerfile
      target: dagster
    entrypoint: ["tini", "--", "../lib/nmdc_runtime/site/entrypoint-daemon.sh"]
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      dagster-postgresql: { condition: service_started }
      # Wait until the MongoDB replica set has been set up by the "init container"
      # before starting this Dagster daemon container.
      mongo-init: { condition: service_completed_successfully }
    volumes:
      - ./:/opt/dagster/lib
    env_file: .env.test

  # Uvicorn server hosting the FastAPI application.
  fastapi:
    build:
      context: .
      dockerfile: nmdc_runtime/Dockerfile
      target: fastapi
    ports:
      - "8000:8000"
    volumes:
      - .:/code
    # Wait until the MongoDB replica set has been set up by the "init container"
    # before starting this FastAPI container.
    depends_on:
      mongo-init: { condition: service_completed_successfully }
    env_file: .env.test

  # Short-lived MongoDB server used to initialize the one used by the FastAPI application.
  mongo-init:
    image: mongo:8.0.4
    volumes:
      - ./wait-for-it.sh:/wait-for-it.sh:ro
      - .docker/mongo_init/initialize_replica_set.sh:/initialize_replica_set.sh:ro
    depends_on:
      mongo: { condition: service_started }
    entrypoint: /bin/bash /wait-for-it.sh --host=mongo --port=27017 --timeout=20 -- /bin/sh /initialize_replica_set.sh mongo 27017 admin root

  # MongoDB server used by the FastAPI application.
  mongo:
    image: mongo:8.0.4
    ports:
      - "27018:27017"
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: root
    # Configure MongoDB to run in replica set mode, so we can use MongoDB transactions.
    #
    # Note: Including a KeyFile is necessary when doing the combination of (a) running MongoDB in
    #       replica set mode and (b) running MongoDB with authentication enabled.
    #
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/keyFile"]
    volumes:
      - mongo_data:/data/db
      - ./mongoKeyFile:/keyFile:ro
      - ./tests/nmdcdb:/nmdcdb_dump:ro
      - ./tests/mongorestore-nmdc-testdb.sh:/mongorestore-nmdc-testdb.sh:ro

  # Test runner.
  test:
    # Prevent Docker Compose from starting this service automatically.
    # Reference: https://stackoverflow.com/a/65957695
    profiles:
      - donotstart
    build:
      context: .
      dockerfile: nmdc_runtime/Dockerfile
      target: test
    env_file: .env.test
    depends_on:
      mongo-init: { condition: service_completed_successfully }
      mongo: { condition: service_started }
      fastapi: { condition: service_started }
      dagster-daemon: { condition: service_started }
      dagster-dagit: { condition: service_started }
    volumes:
      - .:/code

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local

name: nmdc-runtime-test