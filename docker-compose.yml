services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  # Tests use `postgres:11` image.
  # https://github.com/dagster-io/dagster/blob/0.11.9/python_modules/libraries/dagster-postgres/dagster_postgres_tests/docker-compose.yml
  dagster-postgresql:
    image: postgres:11
    container_name: dagster-postgresql
    volumes:
      - nmdc_runtime_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"

  # This service runs dagit.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster-dagit:
    build:
      context: .
      dockerfile: nmdc_runtime/dagster.Dockerfile
    container_name: dagster-dagit
    entrypoint: ["tini", "--", "../lib/nmdc_runtime/site/entrypoint-dagit.sh"]
    expose:
      - "3000"
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      - dagster-postgresql
    restart: on-failure
    volumes:
      - ./:/opt/dagster/lib

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster-daemon:
    build:
      context: .
      dockerfile: nmdc_runtime/dagster.Dockerfile
    container_name: dagster-daemon
    entrypoint: ["tini", "--", "../lib/nmdc_runtime/site/entrypoint-daemon.sh"]
    restart: on-failure
    env_file:
      - .env
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      - dagster-postgresql
    volumes:
      - ./:/opt/dagster/lib

  fastapi:
    build:
      context: .
      dockerfile: nmdc_runtime/fastapi.Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    command: ["uvicorn", "nmdc_runtime.api.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
    env_file:
      - .env
    depends_on:
      - mongo
    volumes:
      - .:/code

  mongo:
    image: mongo:7.0.15
    container_name: mongo
    ports:
      - "27018:27017"
    volumes:
      - nmdc_runtime_mongo_data:/data/db
      - ./mongoKeyFile:/keyFile:ro
      - .docker/mongo/ensure_replica_set_is_initialized.sh:/ensure_replica_set_is_initialized.sh:ro
      - ./tests:/app_tests
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: root

    # Configure MongoDB to run in replica set mode, so we can use MongoDB transactions.
    #
    # Note: Including a KeyFile is necessary when doing the combination of (a) running MongoDB in
    #       replica set mode and (b) running MongoDB with authentication enabled.
    #
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/keyFile"]

    # Implement a healthcheck that initializes the replica set if it hasn't already been initialized.
    #
    # Note: One of our team members got the idea for repurposing Docker Compose's `healthcheck` feature
    #       for running an arbitrary script some time after the container has started up, from this article:
    #       https://medium.com/workleap/the-only-local-mongodb-replica-set-with-docker-compose-guide-youll-ever-need-2f0b74dd8384
    #
    # Reference: https://docs.docker.com/reference/compose-file/services/#healthcheck
    #
    healthcheck:
      test: /bin/sh /ensure_replica_set_is_initialized.sh
      start_period: 1m
      start_interval: 5s
      interval: 10m

volumes:
  nmdc_runtime_postgres_data:
    driver: local
  nmdc_runtime_mongo_data:
    driver: local


secrets:
  mongoKeyFile:
    file: ./mongoKeyFile