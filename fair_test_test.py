# -*- coding: utf-8 -*-
"""Fair-test-test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ncxXySL7wSzva9y7mj56jJSJjM0LXHhG
"""

import requests

# hard coded NMDC DOI can be replaced with fuzzer
DATA = {
  "subject": "doi:10.25585/1487763"
}

# source: https://github.com/MaastrichtU-IDS/fair-enough-metrics
BASE_URL = "https://metrics.api.fair-enough.semanticscience.org/tests/"


# List of URL endpoints
TEST_ENDPOINTS = ["a1-data-authorization",
"a1-data-protocol",
"a1-metadata-authorization",
"a1-metadata-protocol",
"a2-metadata-persistent",
"f1-data-identifier-persistent",
"f1-metadata-identifier-persistent",
"f1-metadata-identifier-unique",
"f2-grounded-metadata",
"f2-structured-metadata",
"f3-data-identifier-in-metadata",
"f3-metadata-identifier-in-metadata",
"f4-searchable",
"i1-data-knowledge-representation-semantic",
"i1-data-knowledge-representation-structured",
"i1-metadata-knowledge-representation-semantic",
"i1-metadata-knowledge-representation-structured",
"i2-fair-vocabularies-known",
"i2-fair-vocabularies-resolve",
"i3-metadata-contains-outward-links",
"r1-community-standards",
"r1-includes-license",
"r1-includes-standard-license"]

## dict to hold score
SCORE_DICT = {
    "F": {"score": 0, "count": 0},
    "A": {"score": 0, "count": 0},
    "I": {"score": 0, "count": 0},
    "R": {"score": 0, "count": 0},
    "TOTAL": {"score": 0, "count": 0}
}

# Score is a 0 or 1
def get_response_score(data):
  score = int(data[0]['http://semanticscience.org/resource/SIO_000300'][0]['@value'])

  if score not in [0,1]:
    raise ValueError(f"An integer value of 0 or 1 was expected, found: {score}")

  return score

# main loop to test all endpoints
def test(endpoints, base_url=BASE_URL, data=DATA, scores=SCORE_DICT):

    for endpoint in endpoints:
      url = BASE_URL + endpoint
      key = endpoint[0].upper()

      try:
          rv = requests.post(url, json=data)
          print(f"POST request to {endpoint} completed with status code {rv.status_code}.")
          response = rv.json()
          fair_score = get_response_score(response)
          print(f"{endpoint} scored {fair_score}.")

          SCORE_DICT[key]["score"] += fair_score
          SCORE_DICT["TOTAL"]["score"] += fair_score
          SCORE_DICT[key]["count"] += 1
          SCORE_DICT["TOTAL"]["count"] += 1

      except requests.exceptions.RequestException as e:
          print(f"Failed to make POST request to {url}: {e}")

    return scores

score = test(TEST_ENDPOINTS)

print("TEST RESULTS")
[print(f"{key}: {SCORE_DICT[key]['score']} / {SCORE_DICT[key]['count']}") for key in SCORE_DICT.keys()]

